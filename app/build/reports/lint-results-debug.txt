/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/build.gradle:4: Error: The compileSdkVersion (28) should not be lower than the targetSdkVersion (32) [GradleCompatible]
    compileSdk 28
    ~~~~~~~~~~~~~

   Explanation for issues of type "GradleCompatible":
   There are some combinations of libraries, or tools and libraries, that are
   incompatible, or can lead to bugs. One such incompatibility is compiling
   with a version of the Android support libraries that is not the latest
   version (or in particular, a version lower than your targetSdkVersion).

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/AndroidManifest.xml:9: Warning: WRITE_EXTERNAL_STORAGE no longer provides write access when targeting Android 10+ [ScopedStorage]
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ScopedStorage":
   Scoped storage is enforced on Android 10+ (or Android 11+ if using
   requestLegacyExternalStorage). In particular, WRITE_EXTERNAL_STORAGE will
   no longer provide write access to all files; it will provide the equivalent
   of READ_EXTERNAL_STORAGE instead.

   The MANAGE_EXTERNAL_STORAGE permission can be used to manage all files, but
   it is rarely necessary and most apps on Google Play are not allowed to use
   it. Most apps should instead migrate to use scoped storage. To modify or
   delete files, apps should request write access from the user as described
   at https://goo.gle/android-mediastore-createwriterequest.

   To learn more, read these resources: Play policy:
   https://goo.gle/policy-storage-help Allowable use cases:
   https://goo.gle/policy-storage-usecases

   https://goo.gle/android-storage-usecases

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/java/com/rockchip/gpadc/demo/CameraPreviewActivity.java:476: Warning: Consider using apply() instead; commit writes its data to persistent storage immediately, whereas apply will handle it in the background [ApplySharedPref]
            editor.commit();
                   ~~~~~~~~

   Explanation for issues of type "ApplySharedPref":
   Consider using apply() instead of commit on shared preferences. Whereas
   commit blocks and writes its data to persistent storage immediately, apply
   will handle it in the background.

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/java/com/rockchip/gpadc/demo/InferenceResult.java:136: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                resultString += String.format("(%.1f%%) ", confidence * 100.0f);
                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "DefaultLocale":
   Calling String#toLowerCase() or #toUpperCase() without specifying an
   explicit locale is a common source of bugs. The reason for that is that
   those methods will use the current locale on the user's device, and even
   though the code appears to work correctly when you are developing the app,
   it will fail in some locales. For example, in the Turkish locale, the
   uppercase replacement for i is not I.

   If you want the methods to just perform ASCII replacement, for example to
   convert an enum name, call String#toUpperCase(Locale.US) instead. If you
   really want to use the current locale, call
   String#toUpperCase(Locale.getDefault()) instead.

   https://developer.android.com/reference/java/util/Locale.html#default_locale

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/build.gradle:8: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdkVersion 32
        ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application runs on a version of Android that is more recent than
   your targetSdkVersion specifies that it has been tested with, various
   compatibility modes kick in. This ensures that your application continues
   to work, but it may look out of place. For example, if the targetSdkVersion
   is less than 14, your app may get an option button in the UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/java/com/rockchip/gpadc/demo/CameraPreviewActivity.java:583: Warning: Accessing internal APIs via reflection is not supported and may not work on all devices or in the future [PrivateApi]
            Class<?> classType = Class.forName("android.os.SystemProperties");
                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "PrivateApi":
   Using reflection to access hidden/private Android APIs is not safe; it will
   often not work on devices from other vendors, and it may suddenly stop
   working (if the API is removed) or crash spectacularly (if the API behavior
   changes, since there are no guarantees for compatibility).

   https://developer.android.com/preview/restrictions-non-sdk-interfaces

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/build.gradle:53: Warning: A newer version of junit:junit than 4.12 is available: 4.13.2 [GradleDependency]
    testImplementation 'junit:junit:4.12'
                       ~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/java/com/rockchip/gpadc/demo/MainActivity.java:39: Warning: Unnecessary; SDK_INT is always >= 25 [ObsoleteSdkInt]
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/java/com/rockchip/gpadc/demo/MainActivity.java:70: Warning: Unnecessary; SDK_INT is always >= 25 [ObsoleteSdkInt]
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/java/com/rockchip/gpadc/demo/CameraPreviewActivity.java:483: Warning: This Handler class should be static or leaks might occur (anonymous android.os.Handler) [HandlerLeak]
    private Handler mHandler = new Handler()
                               ^

   Explanation for issues of type "HandlerLeak":
   Since this Handler is declared as an inner class, it may prevent the outer
   class from being garbage collected. If the Handler is using a Looper or
   MessageQueue for a thread other than the main thread, then there is no
   issue. If the Handler is using the Looper or MessageQueue of the main
   thread, you need to fix your Handler declaration, as follows: Declare the
   Handler as a static class; In the outer class, instantiate a WeakReference
   to the outer class and pass this object to your Handler when you
   instantiate the Handler; Make all references to members of the outer class
   using the WeakReference object.

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:5: Warning: Possible overdraw: Root element paints background #000000 with a theme that also paints a background (inferred theme is @android:style/Theme.NoTitleBar.Fullscreen) [Overdraw]
    android:background="#000000" >
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/values/dimens.xml:4: Warning: The resource R.dimen.activity_horizontal_margin appears to be unused [UnusedResources]
    <dimen name="activity_horizontal_margin">16dp</dimen>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/values/dimens.xml:5: Warning: The resource R.dimen.activity_vertical_margin appears to be unused [UnusedResources]
    <dimen name="activity_vertical_margin">16dp</dimen>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/drawable-hdpi/ic_launcher.png: Warning: The resource R.drawable.ic_launcher appears to be unused [UnusedResources]
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/drawable-hdpi/ic_launcher_round.png: Warning: The resource R.drawable.ic_launcher_round appears to be unused [UnusedResources]
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/main2.xml:2: Warning: The resource R.layout.main2 appears to be unused [UnusedResources]
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
^
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/values/strings.xml:8: Warning: The resource R.string.buttonCamera appears to be unused [UnusedResources]
    <string name="buttonCamera">YOLO Camera Demo</string>
            ~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/values/strings.xml:9: Warning: The resource R.string.buttonImage appears to be unused [UnusedResources]
    <string name="buttonImage">YOLO Image Demo</string>
            ~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/values/styles.xml:7: Warning: The resource R.style.AppBaseTheme appears to be unused [UnusedResources]
    <style name="AppBaseTheme" parent="android:Theme.Light">
           ~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/values/styles.xml:16: Warning: The resource R.style.AppTheme appears to be unused [UnusedResources]
    <style name="AppTheme" parent="AppBaseTheme">
           ~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.

   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests=true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests=true.

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res: Warning: Missing density variation folders in /Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res: drawable-mdpi, drawable-xhdpi, drawable-xxhdpi [IconMissingDensityFolder]

   Explanation for issues of type "IconMissingDensityFolder":
   Icons will look best if a custom version is provided for each of the major
   screen density classes (low, medium, high, extra-high, extra-extra-high).
   This lint check identifies folders which are missing, such as
   drawable-hdpi.

   Low density is not really used much anymore, so this check ignores the ldpi
   density. To force lint to include it, set the environment variable
   ANDROID_LINT_INCLUDE_LDPI=true. For more information on current density
   usage, see https://developer.android.com/about/dashboards

   https://developer.android.com/guide/practices/screens_support.html

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:12: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:35: Warning: Missing contentDescription attribute on image [ContentDescription]
        <ImageView
         ~~~~~~~~~

   Explanation for issues of type "ContentDescription":
   Non-textual widgets like ImageViews and ImageButtons should use the
   contentDescription attribute to specify a textual description of the widget
   such that screen readers and other accessibility tools can adequately
   describe the user interface.

   Note that elements in application screens that are purely decorative and do
   not provide any content or enable a user action should not have
   accessibility content descriptions. In this case, just suppress the lint
   warning with a tools:ignore="ContentDescription" attribute.

   Note that for text fields, you should not set both the hint and the
   contentDescription attributes since the hint will never be shown. Just set
   the hint.

   https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:73: Warning: Hardcoded string "0", should use @string resource [HardcodedText]
            android:text="0"
            ~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:85: Warning: Hardcoded string "0", should use @string resource [HardcodedText]
            android:text="0"
            ~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:95: Warning: Hardcoded string ".", should use @string resource [HardcodedText]
            android:text="."
            ~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:107: Warning: Hardcoded string "0", should use @string resource [HardcodedText]
            android:text="0"
            ~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:119: Warning: Hardcoded string "0", should use @string resource [HardcodedText]
            android:text="0"
            ~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:129: Warning: Hardcoded string "FPS", should use @string resource [HardcodedText]
            android:text="FPS"
            ~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:23: Warning: @id/textViewTitle can overlap ImageView-3 if @string/app_title grows due to localized text expansion [RelativeOverlap]
        <TextView
         ~~~~~~~~

   Explanation for issues of type "RelativeOverlap":
   If relative layout has text or button items aligned to left and right sides
   they can overlap each other due to localized text expansion unless they
   have mutual constraints like toEndOf/toStartOf.

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:27: Warning: Consider replacing android:layout_alignParentLeft with android:layout_alignParentStart="true" to better support right-to-left layouts [RtlHardcoded]
            android:layout_alignParentLeft="true"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:29: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="20dp" to better support right-to-left layouts [RtlHardcoded]
            android:layout_marginLeft="20dp"
            ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:38: Warning: Consider replacing android:layout_alignParentRight with android:layout_alignParentEnd="true" to better support right-to-left layouts [RtlHardcoded]
            android:layout_alignParentRight="true"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:40: Warning: Consider replacing android:layout_marginRight with android:layout_marginEnd="20dp" to better support right-to-left layouts [RtlHardcoded]
            android:layout_marginRight="20dp"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:47: Warning: Use "start" instead of "left" to ensure correct behavior in right-to-left locales [RtlHardcoded]
        android:layout_gravity="left |top"
                                ~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:48: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="20dp" to better support right-to-left layouts [RtlHardcoded]
        android:layout_marginLeft="20dp"
        ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:70: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="15dp" to better support right-to-left layouts [RtlHardcoded]
            android:layout_marginLeft="15dp"
            ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:82: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="5dp" to better support right-to-left layouts [RtlHardcoded]
            android:layout_marginLeft="5dp"
            ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:93: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="5dp" to better support right-to-left layouts [RtlHardcoded]
            android:layout_marginLeft="5dp"
            ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:104: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="5dp" to better support right-to-left layouts [RtlHardcoded]
            android:layout_marginLeft="5dp"
            ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:116: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="5dp" to better support right-to-left layouts [RtlHardcoded]
            android:layout_marginLeft="5dp"
            ~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/res/layout/activity_main.xml:127: Warning: Consider replacing android:layout_marginLeft with android:layout_marginStart="15dp" to better support right-to-left layouts [RtlHardcoded]
            android:layout_marginLeft="15dp"
            ~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "RtlHardcoded":
   Using Gravity#LEFT and Gravity#RIGHT can lead to problems when a layout is
   rendered in locales where text flows from right to left. Use Gravity#START
   and Gravity#END instead. Similarly, in XML gravity and layout_gravity
   attributes, use start rather than left.

   For XML attributes such as paddingLeft and layout_marginLeft, use
   paddingStart and layout_marginStart. NOTE: If your minSdkVersion is less
   than 17, you should add both the older left/right attributes as well as the
   new start/end attributes. On older platforms, where RTL is not supported
   and the start/end attributes are unknown and therefore ignored, you need
   the older left/right attributes. There is a separate lint check which
   catches that type of error.

   (Note: For Gravity#LEFT and Gravity#START, you can use these constants even
   when targeting older platforms, because the start bitmask is a superset of
   the left bitmask. Therefore, you can use gravity="start" rather than
   gravity="left|start".)

/Users/zycer/workspace/rknn_yolov5_android_apk_demo/app/src/main/AndroidManifest.xml: Warning: The project references RTL attributes, but does not explicitly enable or disable RTL support with android:supportsRtl in the manifest [RtlEnabled]

   Explanation for issues of type "RtlEnabled":
   To enable right-to-left support, when running on API 17 and higher, you
   must set the android:supportsRtl attribute in the manifest <application>
   element.

   If you have started adding RTL attributes, but have not yet finished the
   migration, you can set the attribute to false to satisfy this lint check.

1 errors, 42 warnings
